

import pygame
import requests

# Initialize pygame
pygame.init()

# Set up the pygame window
window = pygame.display.set_mode((450, 450))
pygame.display.set_caption("Sudoku Solver")

# Define the Sudoku grid
grid = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

# Function to check if a grid position is empty
def is_empty(position):
    return grid[position[0]][position[1]] == 0

# Function to check if a value is valid
def is_valid(position, value):
    # Check the row
    for i in range(9):
        if grid[position[0]][i] == value:
            return False

    # Check the column
    for i in range(9):
        if grid[i][position[1]] == value:
            return False

    # Check the box
    box_x = position[0] // 3
    box_y = position[1] // 3
    for i in range(3):
        for j in range(3):
            if grid[box_x * 3 + i][box_y * 3 + j] == value:
                return False

    return True

# Function to solve the Sudoku using backtracking
def solve_sudoku(position):
    if position[0] == 9:
        return True

    if position[1] == 9:
        return solve_sudoku((position[0] + 1, 0))

    if not is_empty(position):
        return solve_sudoku((position[0], position[1] + 1))

    for value in range(1, 10):
        if is_valid(position, value):
            grid[position[0]][position[1]] = value
            if solve_sudoku((position[0], position[1] + 1)):
                return True

    grid[position[0]][position[1]] = 0
    return False

# Solve the Sudoku
solve_sudoku((0, 0))

# Display the solved Sudoku
for row in grid:
    print(row)

# Quit pygame
pygame.quit()
