import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
df = pd.read_csv('path_to_stock_market_dataset.csv')

# Handle missing values
df.dropna(inplace=True)

# Remove duplicates
df.drop_duplicates(inplace=True)

# Convert data types
df['date'] = pd.to_datetime(df['date'])

# Visualize stock prices over time
plt.figure(figsize=(12, 6))
plt.plot(df['date'], df['close'], label='Close Price')
plt.title('Stock Prices Over Time')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend()
plt.show()

# Calculate moving averages
df['20_MA'] = df['close'].rolling(window=20).mean()
df['50_MA'] = df['close'].rolling(window=50).mean()

# Plot moving averages
plt.figure(figsize=(12, 6))
plt.plot(df['date'], df['close'], label='Close Price')
plt.plot(df['date'], df['20_MA'], label='20 Day Moving Average')
plt.plot(df['date'], df['50_MA'], label='50 Day Moving Average')
plt.title('Moving Averages')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend()
plt.show()

# Calculate daily returns
df['daily_return'] = df['close'].pct_change()

# Plot distribution of daily returns
plt.figure(figsize=(12, 6))
sns.histplot(df['daily_return'].dropna(), bins=100, kde=True)
plt.title('Distribution of Daily Returns')
plt.xlabel('Daily Return')
plt.ylabel('Frequency')
plt.show()

# Assuming multiple stock data are present in the dataset with columns 'stock_1', 'stock_2', etc.
# Calculate correlations (example with dummy stock columns, replace with actual columns in your dataset)
# correlation_matrix = df[['stock_1', 'stock_2', 'stock_3']].corr()
# Uncomment and modify the above line if you have multiple stocks in your dataset

# Plot correlation heatmap (example with dummy data, replace with actual data in your dataset)
# plt.figure(figsize=(8, 6))
# sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
# plt.title('Correlation Between Different Stocks')
# plt.show()
# Uncomment and modify the above block if you have multiple stocks in your dataset

# Simple forecasting using moving average
df['forecast'] = df['close'].rolling(window=20).mean()

# Plot forecast
plt.figure(figsize=(12, 6))
plt.plot(df['date'], df['close'], label='Close Price')
plt.plot(df['date'], df['forecast'], label='Forecast')
plt.title('Stock Price Forecast')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend()
plt.show()
